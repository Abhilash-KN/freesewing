{"version":3,"file":"index.js","sources":["../src/roundMm/index.js","../src/formatImperial/index.js","../src/formatMm/index.js"],"sourcesContent":["const roundMm = (val, units) => {\r\n  if (units === \"imperial\") return Math.round(val * 1000000) / 1000000;\r\n  else return Math.round(val * 10) / 10;\r\n};\r\n\r\nexport default roundMm;\r\n","const formatImperial = (neg, inch, numo = false, deno = false, format = 'html') => {\r\n  if (format === 'html') {\r\n    if (numo) return `<span>${neg}${inch}&nbsp;<sup>${numo}</sup>/<sub>${deno}</sub></span>`\r\n    else return `<span>${neg}${inch}</span>`\r\n  } else {\r\n    if (numo) return `${neg}${inch} ${numo}/${deno}`\r\n    else return `${neg}${inch}`\r\n  }\r\n}\r\n\r\nexport default formatImperial\r\n","import roundMm from '../roundMm'\r\nimport formatImperial from '../formatImperial'\r\n\r\nconst formatMm = (val, units, format = 'html') => {\r\n  val = roundMm(val)\r\n  if (units === 'imperial') {\r\n    if (val == 0) return formatImperial('', 0, false, false, format)\r\n    let negative = ''\r\n    let inches = ''\r\n    let rest = ''\r\n    let fraction = val / 25.4\r\n    if (fraction < 0) {\r\n      fraction = fraction * -1\r\n      negative = '-'\r\n    }\r\n    if (Math.abs(fraction) < 1) rest = fraction\r\n    else {\r\n      inches = Math.floor(fraction)\r\n      rest = fraction - inches\r\n    }\r\n    let suffix = ''\r\n    if (format === 'html') suffix = '\"'\r\n    let fraction128 = Math.round(rest * 128)\r\n    if (fraction128 == 0) return formatImperial(negative, inches, false, false, format)\r\n    if (fraction128 % 64 == 0)\r\n      return formatImperial(negative, inches, fraction128 / 64, 2, format) + suffix\r\n    if (fraction128 % 32 == 0)\r\n      return formatImperial(negative, inches, fraction128 / 32, 4, format) + suffix\r\n    if (fraction128 % 16 == 0)\r\n      return formatImperial(negative, inches, fraction128 / 16, 8, format) + suffix\r\n    if (fraction128 % 8 == 0)\r\n      return formatImperial(negative, inches, fraction128 / 8, 16, format) + suffix\r\n    if (fraction128 % 4 == 0)\r\n      return formatImperial(negative, inches, fraction128 / 4, 32, format) + suffix\r\n    if (fraction128 % 2 == 0)\r\n      return formatImperial(negative, inches, fraction128 / 2, 64, format) + suffix\r\n\r\n    return negative + Math.round(fraction * 100) / 100 + suffix\r\n  } else {\r\n    if (format === 'html') return roundMm(val / 10) + 'cm'\r\n    else return roundMm(val / 10)\r\n  }\r\n}\r\n\r\nexport default formatMm\r\n"],"names":["roundMm","val","units","Math","round","formatImperial","neg","inch","numo","deno","format","formatMm","floor","abs","negative","inches","rest","fraction","suffix","fraction128"],"mappings":"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"}